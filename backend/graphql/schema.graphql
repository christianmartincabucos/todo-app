type Mutation {
  createTask(description: String!, status: String!): Task! @create
    @inject(context: "user.id", name: "user_id")
    @guard  
  updateTask(id: ID!, status: String): Task! @update(columns: ["status"]) @guard
  deleteTask(id: ID! @whereKey): Task! @delete @guard
  deleteAllTasks: String @field(resolver: "App\\GraphQL\\Mutations\\TaskMutator@deleteAll") @guard

  register(
    name: String!, 
    email: String!, 
    password: String!
  ): AuthPayload! @field(resolver: "App\\GraphQL\\Mutations\\AuthMutator@register")
  @validator(class: "App\\GraphQL\\Validators\\RegisterValidator")

  login(
    email: String! 
    password: String!
  ):  
  AuthPayload! @field(resolver: "App\\GraphQL\\Mutations\\AuthMutator@login") 
  @validator(class: "App\\GraphQL\\Validators\\LoginValidator")
  
  logout: MessagePayload! @field(resolver: "App\\GraphQL\\Mutations\\AuthMutator@logout")
}
type Task {
  id: ID!
  description: String!
  status: String!
  user: User @belongsTo
}

type User {
  id: ID!
  name: String!
  email: String!
  tasks: [Task!]! @hasMany
}

type Query {
  users: [User!]! @paginate(defaultCount: 10) 
  user: User! @guard
  tasks(status: String @eq): [Task!]! @all @guard
}

type AuthPayload {
  user: User!
  token: String!
}

type MessagePayload {
  message: String!
}

